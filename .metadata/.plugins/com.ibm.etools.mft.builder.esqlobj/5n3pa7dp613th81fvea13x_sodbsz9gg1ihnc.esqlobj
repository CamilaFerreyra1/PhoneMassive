CREATE COMPUTE MODULE Failure_Handler_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.Variables.REST = EXISTS(InputLocalEnvironment.REST[]);
		
		SET Environment.Variables.Service_Name = COALESCE(InputRoot.HTTPInputHeader."X-Original-HTTP-Command", InputLocalEnvironment.REST.Input.URI);
		
		DECLARE operationString CHARACTER '/';
		FOR path AS InputLocalEnvironment.HTTP.Input.Path.Segment[] DO
			SET operationString = operationString || path || '/';
		END FOR;
		
		SET Environment.Service.Operation.NameFallido = operationString;
		SET Environment.Variables.UserName = COALESCE(InputRoot.HTTPInputHeader.Username, 'NULL');
		SET Environment.Variables.IP = InputRoot.HTTPInputHeader."X-Remote-Addr";
		
		CALL CopyMessageHeaders();

		SET OutputExceptionList = InputExceptionList;
		DECLARE soapenv NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
		DECLARE ErrorNumber INTEGER;
		DECLARE ErrorText CHARACTER;

		CALL GetLastExceptionDetail(InputExceptionList,ErrorNumber,ErrorText);

		IF NOT Environment.Variables.REST THEN

			CASE ErrorNumber
			WHEN '5025' THEN
				SET OutputRoot.XMLNSC.soapenv:Fault.faultcode='SOA-GSS-0200';
				SET OutputRoot.XMLNSC.soapenv:Fault.faultstring='Schema Validation Error';
			WHEN '3602' THEN
				SET OutputRoot.XMLNSC.soapenv:Fault.faultcode='SOA-GSS-0200';
				SET OutputRoot.XMLNSC.soapenv:Fault.faultstring='Schema Validation Error';
			WHEN '5004' THEN
				SET OutputRoot.XMLNSC.soapenv:Fault.faultcode='SOA-GSS-0200';
				SET OutputRoot.XMLNSC.soapenv:Fault.faultstring='Schema Validation Error';
			WHEN '3001' THEN
				SET OutputRoot.XMLNSC.soapenv:Fault.faultcode='SOA-GSS-0200';
				SET OutputRoot.XMLNSC.soapenv:Fault.faultstring='Schema Validation Error';
			ELSE
				SET OutputRoot.XMLNSC.soapenv:Fault.faultcode= 'SOA-GSS-9999';
				SET OutputRoot.XMLNSC.soapenv:Fault.faultstring= 'System General Error';
			END CASE;

			SET OutputRoot.XMLNSC.soapenv:Fault.detail.TransactionId = Environment.TransactionId;
			SET OutputLocalEnvironment.Destination.SOAP.Reply.Transport.HTTP.ReplyStatusCode = 500;

		ELSE
			DECLARE Code CHAR;
			IF CONTAINS(ErrorText, 'percent') THEN
				SET Code = '400';
			ELSE
				SET Code = '500';
			END IF;
			SET Environment.Variables.ApplicationId = InputRoot.HTTPInputHeader.Applicationid;--InputLocalEnvironment.REST.Input.Parameters.ApplicationId;
			SET Environment.Variables.CompanyCode = InputRoot.HTTPInputHeader.Companycode;--InputLocalEnvironment.REST.Input.Parameters.CompanyCode;
			SET Environment.Variables.ClientTypeId = InputRoot.HTTPInputHeader.Clienttypeid;--InputLocalEnvironment.REST.Input.Parameters.ClientTypeId;
			CREATE FIELD OutputRoot.JSON.Data;
			SET Environment.Variables.ErrorCodes.Code = 'GSS-' || Code || '-003';
			PROPAGATE TO TERMINAL 'out1' DELETE NONE;
			CALL ResponseRestError(OutputRoot.JSON.Data, Environment.Variables.ErrorCodeRes, Environment.Variables);
			SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = Code;
		END IF;

		RETURN TRUE;
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;